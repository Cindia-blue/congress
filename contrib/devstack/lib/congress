# lib/congress
# functions - functions specific to congress

# Dependencies:
# ``functions`` file
# ``DEST`` must be defined
# ``STACK_USER`` must be defined

# ``stack.sh`` calls the entry points in this order:
#
# - install_congress
# - install_congressclient
# - configure_congress
# - init_congress
# - create_congress_cache_dir
# - start_congress_service_and_check
#
# ``unstack.sh`` calls the entry points in this order:
#
# - stop_congress

# Functions in lib/congress are classified into the following categories:
#
# - entry points (called from stack.sh or unstack.sh)
# - internal functions
# - congress exercises


# Congress Policy
# ------------------

# Make sure that congress is enabled in ``ENABLED_SERVICES``.
#

# Congress Configuration
# -----------------------------

# Set up default directories
CONGRESS_DIR=$DEST/congress
CONGRESSCLIENT_DIR=$DEST/python-congressclient
CONGRESS_AUTH_CACHE_DIR=${CONGRESS_AUTH_CACHE_DIR:-/var/cache/congress}
CONGRESS_HORIZON_DIR=$CONGRESS_DIR/contrib/horizon

# Support entry points installation of console scripts
if [[ -d $CONGRESS_DIR/bin/congress-server ]]; then
    CONGRESS_BIN_DIR=$CONGRESS_DIR/bin
else
    CONGRESS_BIN_DIR=$(get_python_exec_prefix)
fi

CONGRESS_CONF_DIR=/etc/congress
CONGRESS_CONF=$CONGRESS_CONF_DIR/congress.conf

# Default Congress Port
CONGRESS_PORT=${CONGRESS_PORT:-1789}
# Default Congress Host
CONGRESS_HOST=${CONGRESS_HOST:-$SERVICE_HOST}
# Default admin username
CONGRESS_ADMIN_USERNAME=${CONGRESS_ADMIN_USERNAME:-congress}
# Default auth strategy
CONGRESS_AUTH_STRATEGY=${CONGRESS_AUTH_STRATEGY:-keystone}
# Default name for Congress database
CONGRESS_DB_NAME=${CONGRESS_DB_NAME:-congress}

# Save trace setting
XTRACE=$(set +o | grep xtrace)
set +o xtrace


# Functions
# ---------

# Test if any Congress services are enabled
# is_congress_enabled
function is_congress_enabled {
    [[ ,${ENABLED_SERVICES} =~ ,"congress" ]] && return 0
    return 1
}

# configure_congress()
# Set common config for all congress server and agents.
function configure_congress {
    setup_develop $CONGRESS_DIR
    # Put config files in ``CONGRESS_CONF_DIR`` for everyone to find
    if [[ ! -d $CONGRESS_CONF_DIR ]]; then
        sudo mkdir -p $CONGRESS_CONF_DIR
    fi
    sudo chown $STACK_USER $CONGRESS_CONF_DIR

    cp $CONGRESS_DIR/etc/congress.conf.sample $CONGRESS_CONF

    # If needed, move config file from ``$CONGRESS_DIR/etc/congress`` to ``CONGRESS_CONF_DIR``

    # Format logging
    if [ "$LOG_COLOR" == "True" ] && [ "$SYSLOG" == "False" ]; then
        setup_colorized_logging $CONGRESS_CONF DEFAULT project_id
    fi
    CONGRESS_API_PASTE_FILE=$CONGRESS_CONF_DIR/api-paste.ini
    CONGRESS_POLICY_FILE=$CONGRESS_CONF_DIR/policy.json
    CONGRESS_POLICY_PATH=$CONGRESS_CONF_DIR/snapshot
    CONGRESS_DATASOURCE_FILE=$CONGRESS_CONF_DIR/datasources.conf

    cp $CONGRESS_DIR/etc/api-paste.ini $CONGRESS_API_PASTE_FILE
    cp $CONGRESS_DIR/etc/policy.json $CONGRESS_POLICY_FILE
    if [[ -d $CONGRESS_DIR/etc/snapshot ]]; then
        cp -r $CONGRESS_DIR/etc/snapshot $CONGRESS_CONF_DIR
    else
        sudo mkdir -p $CONGRESS_CONF_DIR/snapshot
    fi
    cp $CONGRESS_DIR/etc/datasources.conf.sample $CONGRESS_DATASOURCE_FILE

    # Update either configuration file
    iniset $CONGRESS_CONF DEFAULT verbose True
    iniset $CONGRESS_CONF DEFAULT debug $ENABLE_DEBUG_LOG_LEVEL
    iniset $CONGRESS_CONF DEFAULT policy_file $CONGRESS_POLICY_FILE
    iniset $CONGRESS_CONF DEFAULT policy_path $CONGRESS_POLICY_PATH
    iniset $CONGRESS_CONF DEFAULT datasource_file $CONGRESS_DATASOURCE_FILE
    iniset $CONGRESS_CONF DEFAULT auth_strategy $CONGRESS_AUTH_STRATEGY

    iniset $CONGRESS_CONF database connection `database_connection_url $CONGRESS_DB_NAME`

   # Update congress datasource file
   # NOTE(arosen): congress datasource file does not use the same format as others
   # so we use sed instead of iniset. This will removed anyways onces congress can
   # configure datasources via the api.
   sed -i -e "s/password: password/password: $ADMIN_PASSWORD/g" $CONGRESS_DATASOURCE_FILE

    _congress_setup_keystone $CONGRESS_CONF keystone_authtoken

    if is_service_enabled horizon; then
        _congress_setup_horizon
    fi
}

function configure_congressclient {
    setup_develop $CONGRESSCLIENT_DIR
}
# create_congress_cache_dir() - Part of the _congress_setup_keystone() process
function create_congress_cache_dir {
    # Create cache dir
    sudo mkdir -p $CONGRESS_AUTH_CACHE_DIR
    sudo chown $STACK_USER $CONGRESS_AUTH_CACHE_DIR
    rm -f $CONGRESS_AUTH_CACHE_DIR/*
}

# create_congress_accounts() - Set up common required congress accounts

# Tenant               User       Roles
# ------------------------------------------------------------------
# service              congress    admin        # if enabled

# Migrated from keystone_data.sh
function create_congress_accounts {

    SERVICE_TENANT=$(openstack project list | awk "/ $SERVICE_TENANT_NAME / { print \$2 }")
    ADMIN_ROLE=$(openstack role list | awk "/ admin / { print \$2 }")

    if [[ "$ENABLED_SERVICES" =~ "congress" ]]; then

        CONGRESS_USER=$(get_or_create_user "congress" \
            "$SERVICE_PASSWORD" $SERVICE_TENANT "congress@example.com")
        get_or_add_user_role $ADMIN_ROLE $CONGRESS_USER $SERVICE_TENANT

        if [[ "$KEYSTONE_CATALOG_BACKEND" = 'sql' ]]; then

            CONGRESS_SERVICE=$(get_or_create_service "congress" \
                "policy" "Congress Service")
            get_or_create_endpoint $CONGRESS_SERVICE \
                "$REGION_NAME" \
                "http://$SERVICE_HOST:$CONGRESS_PORT/" \
                "http://$SERVICE_HOST:$CONGRESS_PORT/" \
                "http://$SERVICE_HOST:$CONGRESS_PORT/"
        fi
    fi
}

# init_congress() - Initialize databases, etc.
function init_congress {
    recreate_database $CONGRESS_DB_NAME utf8
    # Run Congress db migrations
    congress-db-manage --config-file $CONGRESS_CONF upgrade head
}

# install_congress() - Collect source and prepare
function install_congress {
    git_clone $CONGRESS_REPO $CONGRESS_DIR $CONGRESS_BRANCH
    # congress requires java so we install it here
    install_package default-jre
}

# install_congressclient() - Collect source and prepare
function install_congressclient {
    git_clone $CONGRESSCLIENT_REPO $CONGRESSCLIENT_DIR $CONGRESSCLIENT_BRANCH
    setup_develop $CONGRESSCLIENT_DIR
#    sudo install -D -m 0644 -o $STACK_USER {$CONGRESSCLIENT_DIR/tools/,/etc/bash_completion.d/}congress.bash_completion
}

# Start running processes, including screen
function start_congress_service_and_check {
    # build config-file options
    local cfg_file
    local CFG_FILE_OPTIONS="--config-file $CONGRESS_CONF"

    # Start the Congrss service
    screen_it congress "cd $CONGRESS_DIR && python $CONGRESS_BIN_DIR/congress-server $CFG_FILE_OPTIONS"
    echo "Waiting for Congress to start..."
    # FIXME(arosen): using curl right now to check if congress is alive once we implement version use check below.
    if ! timeout $SERVICE_TIMEOUT sh -c "while ! curl http://$CONGRESS_HOST:$CONGRESS_PORT; do sleep 1; done"; then
        die $LINENO "Congress did not start"
    fi
#    if ! timeout $SERVICE_TIMEOUT sh -c "while ! wget --no-proxy -q -O- http://$CONGRESS_HOST:$CONGRESS_PORT; do sleep 1; done"; then
#        die $LINENO "Congress did not start"
#    fi
}

# stop_congress() - Stop running processes (non-screen)
function stop_congress {
    :
}

# Configures keystone integration for congress service
function _congress_setup_keystone {
    local conf_file=$1
    local section=$2
    local use_auth_url=$3
    local skip_auth_cache=$4

    iniset $conf_file $section auth_uri $KEYSTONE_SERVICE_URI
    iniset $conf_file $section identity_uri $KEYSTONE_AUTH_URI
    iniset $conf_file $section admin_tenant_name $SERVICE_TENANT_NAME
    iniset $conf_file $section admin_user $CONGRESS_ADMIN_USERNAME
    iniset $conf_file $section admin_password $SERVICE_PASSWORD
    if [[ -z $skip_auth_cache ]]; then
        iniset $conf_file $section signing_dir $CONGRESS_AUTH_CACHE_DIR
        # Create cache dir
        create_congress_cache_dir
    fi
}

# Set up Horizon integration with Congress
function _congress_setup_horizon {
    # Dashboard panels
    cp -r $CONGRESS_HORIZON_DIR/datasources $HORIZON_DIR/openstack_dashboard/dashboards/admin/
    cp -r $CONGRESS_HORIZON_DIR/policies $HORIZON_DIR/openstack_dashboard/dashboards/admin/
    cp $CONGRESS_HORIZON_DIR/congress.py $HORIZON_DIR/openstack_dashboard/api/
    cp $CONGRESS_HORIZON_DIR/_50_policy.py $HORIZON_DIR/openstack_dashboard/local/enabled/
    cp $CONGRESS_HORIZON_DIR/_60_policies.py $HORIZON_DIR/openstack_dashboard/local/enabled/
    cp $CONGRESS_HORIZON_DIR/_70_datasources.py $HORIZON_DIR/openstack_dashboard/local/enabled/

    # For unit tests
    echo "python-congressclient" >> $HORIZON_DIR/requirements.txt
    echo -e \
"\n# Load the pluggable dashboard settings"\
"\nimport openstack_dashboard.local.enabled"\
"\nfrom openstack_dashboard.utils import settings"\
"\n\nINSTALLED_APPS = list(INSTALLED_APPS)"\
"\nsettings.update_dashboards(["\
"\n    openstack_dashboard.local.enabled,"\
"\n], HORIZON_CONFIG, INSTALLED_APPS)" >> $HORIZON_DIR/openstack_dashboard/test/settings.py

    # Restart Horizon
    restart_apache_server
}

# Restore xtrace
$XTRACE

# Tell emacs to use shell-script-mode
## Local variables:
## mode: shell-script
## End:
